// these rules are from peep-gbz80.def

replace{
	ld	hl, #%1
	ld	a, (hl)
} by {
	; peephole GB0 used ldh instead of ld a, (hl).
	ldh	a, (#%1)
} if operandsLiteral(%1), immdInRange(0xff00 0xffff '|' %1 0 %2), notUsed('hl')

replace{
 ld	hl, #%1
 ld	(hl), a
} by {
 ; peephole GB1 used ldh instead of ld (hl), a.
 ldh	(#%1), a
} if operandsLiteral(%1), immdInRange(0xff00 0xffff '|' %1 0 %2), notUsed('hl')

replace {
 ld	a, (hl)
 inc	hl
} by {
 ld	a, (hl+)
 ; peephole GB2 used ldi to increment hl after load
}

replace {
 ld	%1, (hl)
 inc	hl
} by {
 ld	a, (hl+)
 ld	%1, a
 ; peephole GB2b used ldi to increment hl after load
} if notUsed('a')

replace {
 ld	%1, (hl)
 dec	hl
} by {
 ld	a, (hl-)
 ld	%1, a
 ; peephole GB3 used ldd to decrement hl after load
} if notUsed('a')

replace {
 ld	a, (hl)
 dec	hl
} by {
 ld	a, (hl-)
 ; peephole GB3b used ldd to decrement hl after load
}

replace {
 ld	(hl), a
 inc	hl
} by {
 ld	(hl+), a
 ; peephole GB4 used ldi to increment hl after load
}

replace {
 ld	(hl), %1
 inc	hl
} by {
 ld	a, %1
 ld	(hl+), a
 ; peephole GB4b used ldi to increment hl after load
} if notUsed('a')

replace {
 ld	(hl), a
 dec	hl
} by {
 ld	(hl-), a
 ; peephole GB5 used ldd to decrement hl after load
}

replace {
 ld	(hl), %1
 dec	hl
} by {
 ld	a, %1
 ld	(hl-), a
 ; peephole GB5b used ldd to decrement hl after load
} if notUsed('a')

replace {
 inc hl
 dec hl
} by {
 ; peephole GB6 removed inc hl / dec hl pair
}

replace {
	ld	(hl), a
	inc	de
	ld	a, (de)
	inc	hl
} by {
	ld	(hl+), a
	; peephole GB7 used ldi to increment hl
	inc	de
	ld	a, (de)
}

replace {
	ld	a, (hl)
	ld	(bc), a
	inc	bc
	inc	hl
} by {
	ld	a, (hl+)
	; peephole GB8 used ldi to increment hl
	ld	(bc), a
	inc	bc
}

replace restart {
	ldhl	sp,#%1
	dec	hl
} by {
	; peephole GB7 combined ld and dec.
	ldhl	sp,#%2
} if immdInRange(-128 127 '-' %1 1 %2)


