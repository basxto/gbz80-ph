replace {
 ld	l, #0x%2
 ld	a, (hl)
 ld	hl, #0xff%2
} by {
 ; load peephole 1 loads constant value of l just once
 ld	l, #0x%2
 ld	a, (hl)
 ld	h, #0xff
}

replace{
 xor	a, a
 ld	(%1), a
 ld	a, #0x01
} by {
 ; load peephole 2 increments instead of using a constant
 xor	a, a
 ld	(%1), a
 inc	a
}

// for TMA_REG, TIMA_REG etc
replace {
 ld	l, #%2
 ld	(hl), #%1
 ld	l, #%3
} by {
 ; load peephole 3 increments instead of using a constant
 ld	l, #%2
 ld	(hl), #%1
 inc	l
} if immdInRange(1 1 '-' %3 %2 %4)

replace {
 ld	l, #%2
 ld	(hl), #%1
 ld	l, #%3
} by {
 ; load peephole 4 decrements instead of using a constant
 ld	l, #%2
 ld	(hl), #%1
 dec	l
} if immdInRange(1 1 '-' %2 %3 %4)

//x++ == 0
replace {
 ld	%1, (hl)
 inc	(hl)
 ld	a, %1
} by {
 ; load peephole 5 loaded directly into a instead of going through %1
 ld	a, (hl)
 inc	(hl)
} if notUsed(%1)

replace{
 ld	%1, #0x00
 xor	a, a
} by {
 ; load peephole 6 shares 0
 xor	a, a
 ld	%1, a
}

replace {
 ld	%2, #0x%4
 ld	%1, #0x%3
} by {
 ; load peephole 7 combined 8 bit loads into 16 bit load
 ld	%1%2, #0x%3%4
} if canAssign(%1%2 '#0x0201')

